---
import crypto from 'node:crypto'

import type { Props } from '@astrojs/starlight/props'

const id = `moon-mask-${crypto.randomBytes(4).toString('hex')}`

// https://web.dev/building-a-theme-switch-component/
// https://github.com/withastro/starlight/blob/9237581c766f68fbb3ce5f9401ca2046f106c7d5/packages/starlight/components/ThemeSelect.astro
---

<starlight-rapide-theme-select>
 
  <!-- <label for="language" class="sr-only">Translate Language</label>
  <div class="flex items-center gap-2 px-2 border border-blue-500/90 rounded-full">
    <svg fill="currentColor" stroke-width="0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" height="1em" width="1em" style="overflow: visible; color: currentcolor;">
      <path fill="currentColor" d="m18.5 10 4.4 11h-2.155l-1.201-3h-4.09l-1.199 3h-2.154L16.5 10h2ZM10 2v2h6v2h-1.968a18.221 18.221 0 0 1-3.62 6.301 14.865 14.865 0 0 0 2.335 1.707l-.75 1.878A17.016 17.016 0 0 1 9 13.725a16.677 16.677 0 0 1-6.201 3.548l-.536-1.929a14.7 14.7 0 0 0 5.327-3.042A18.078 18.078 0 0 1 4.767 8h2.24A16.031 16.031 0 0 0 9 10.877a16.165 16.165 0 0 0 2.91-4.876L2 6V4h6V2h2Zm7.5 10.885L16.253 16h2.492L17.5 12.885Z"></path>
    </svg>
    <select id="language" aria-label="Translate Language" title="Translate" class="p-1 rounded bg-gray-900 focus:outline-none">
      <option value="en">English</option>
      <option value="es">Español</option>
      <option value="fr">Français</option>
      <option value="de">Deutsch</option>
      <option value="zh">中文</option>
      <option value="ja">日本語</option>
    </select>
  </div> -->
  <button
  aria-label="Toggle theme"
  aria-live="polite"
  class="sl-flex"
  title="Toggle theme"
>
  <svg aria-hidden="true" height="16" viewBox="0 0 24 24" width="16">
    <mask class="moon" id={id}>
      <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
      <circle cx="24" cy="10" r="6" fill="black"></circle>
    </mask>
    <circle class="sun" cx="12" cy="12" r="6" mask={`url(#${id})`}></circle>
    <g class="sun-beams" stroke="currentColor">
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </g>
  </svg>
</button>
</starlight-rapide-theme-select>

<style>
  starlight-rapide-theme-select {
    --sl-rapide-theme-select-animation-duration: 400ms;
    --sl-rapide-theme-select-ease-elastic: cubic-bezier(0.5, 1.25, 0.75, 1.25);

    align-self: stretch;
    display: flex;
    gap: 0.5rem;
  }

  button {
    align-items: center;
    background-color: transparent;
    border: none;
    cursor: pointer;
    height: 100%;
    margin-inline: 0.5rem 0.5rem;
    padding-inline: 0.75rem;
  }

  svg {
    stroke-linecap: round;
  }

  svg :is(.moon, .sun, .sun-beams) {
    transform-origin: center;
  }

  svg :is(.moon, .sun) {
    @apply fill-foreground;
  }

  svg .sun-beams {
    @apply stroke-foreground stroke-2;
  }


  :global([data-theme='dark']) svg .sun {
    transform: scale(1.75);
  }

  :global([data-theme='dark']) svg .sun-beams {
    opacity: 0;
  }

  :global([data-theme='dark']) svg .moon circle {
    transform: translateX(-7px);
  }

  @supports (cx: 1) {
    :global([data-theme='dark']) svg .moon circle {
      cx: 17;
      transform: translateX(0);
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    svg .sun {
      transition: transform var(--sl-rapide-theme-select-animation-duration) var(--sl-rapide-theme-select-ease-elastic);
    }

    svg .sun-beams {
      transition:
        opacity var(--sl-rapide-theme-select-animation-duration) ease,
        transform var(--sl-rapide-theme-select-animation-duration) var(--sl-rapide-theme-select-ease-elastic);
    }

    svg .moon circle {
      transition: transform calc(var(--sl-rapide-theme-select-animation-duration) / 2) ease-out;
    }

    @supports (cx: 1) {
      svg .moon circle {
        transition: cx calc(var(--sl-rapide-theme-select-animation-duration) / 2) ease-out;
      }
    }

    :global([data-theme='dark']) svg .sun {
      transform: scale(1.75);
      transition-duration: calc(var(--sl-rapide-theme-select-animation-duration) / 2);
      transition-timing-function: ease;
    }

    :global([data-theme='dark']) svg .sun-beams {
      transform: rotateZ(-25deg);
      transition-duration: calc(var(--sl-rapide-theme-select-animation-duration) / 4);
    }

    :global([data-theme='dark']) svg .moon circle {
      transition-delay: calc(var(--sl-rapide-theme-select-animation-duration) / 4);
      transition-duration: var(--sl-rapide-theme-select-animation-duration);
    }
  }
</style>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
  StarlightThemeProvider.updatePickers()
</script>

<script>
  type Theme = 'auto' | 'dark' | 'light'

  /** Key in `localStorage` to store color theme preference at. */
  const storageKey = 'starlight-theme'

  /** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
  function parseTheme(theme: unknown): Theme {
    return theme === 'auto' || theme === 'dark' || theme === 'light' ? theme : 'auto'
  }

  /** Load the user’s preference from `localStorage`. */
  function loadTheme(): Theme {
    return parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey))
  }

  /** Store the user’s preference in `localStorage`. */
  function storeTheme(theme: Theme): void {
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '')
    }
  }

  /** Get the preferred system color scheme. */
  function getPreferredColorScheme(): Theme {
    return matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark'
  }

  /** Update select menu UI, document theme, and local storage state. */
  function onThemeChange(theme: Theme): void {
    // StarlightThemeProvider.updatePickers(theme)
    document.documentElement.dataset['theme'] = theme === 'auto' ? getPreferredColorScheme() : theme
    storeTheme(theme)
  }

  // React to changes in system color scheme.
  matchMedia(`(prefers-color-scheme: light)`).addEventListener('change', () => {
    if (loadTheme() === 'auto') onThemeChange('auto')
  })

  customElements.define(
    'starlight-rapide-theme-select',
    class StarlightRapideThemeSelect extends HTMLElement {
      constructor() {
        super()
        onThemeChange(loadTheme())
        const button = this.querySelector('button')
        button?.addEventListener('click', () => {
          const theme = parseTheme(document.documentElement.dataset['theme'])
          const newTheme = theme === 'dark' ? 'light' : theme === 'light' ? 'dark' : 'auto'
          onThemeChange(newTheme)
          button?.setAttribute('aria-label', `${newTheme} theme`)
        })
      }
    },
  )
</script>